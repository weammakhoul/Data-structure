
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import AVLTree.AVLNode;

//by weammakhoul
//weammakhoul 207036617
//tamerdamouni 207293069

/**
 * public class AVLNode
 * <p>
 * This class represents an AVLTree with integer keys and boolean values.
 * <p>
 * IMPORTANT: do not change the signatures of any function (i.e. access modifiers, return type, function name and
 * arguments. Changing these would break the automatic tester, and would result in worse grade.
 * <p>
 * However, you are allowed (and required) to implement the given functions, and can add functions of your own
 * according to your needs.
 */

public class AVLTree {
	
    private AVLNode root;
    private int size;
    private AVLNode min;
    private AVLNode max;

    private AVLNode virtual;
    
    
    /**
     * This constructor creates an empty AVLTree.
     */
    public AVLTree(){ //O(1)
        virtual = new AVLNode(-1 ,null); 		// Virtual.key == -1 and virtual.value == null
        virtual.setVirtualLeftRight(); 			// Change virtual sons to null
        virtual.setHeight(-1);					
        root = this.virtual;					// The tree is empty => root = virtual
        size = 0 ;
        min = null;
        max = null;
    }
    
    /**
     * public boolean empty()
     * <p>
     * returns true if and only if the tree is empty
     */
    public boolean empty() { //O(1)
        return this.size()==0;
    }

    /**
     * public boolean search(int k)
     * <p>
     * returns the info of an item with key k if it exists in the tree
     * otherwise, returns null
     */
    public Boolean search(int k) { // O(log n)
        AVLNode node = this.root;
        while (node != this.virtual) {
            if (node.key == k) {
                return node.getValue();
            }					// if current node'key != k 
            if (node.key < k) { // if current node's key smaller than k then we should search in the sub-Tree of the right son
                node = node.getRight();
            } else if (node.key > k) { // otherwise search in the sub-Tree of the left son
                node = node.getLeft();
            }
        }
        return null;  // we reach if there isn't node with key k in the tree
    }
    
    
    /**
     * public int insert(int k, boolean i)
     * <p>
     * inserts an item with key k and info i to the AVL tree.
     * the tree must remain valid (keep its invariants).
     * returns the number of nodes which require rebalancing operations (i.e. promotions or rotations).
     * This always includes the newly-created node.
     * returns -1 if an item with key k already exists in the tree.
     */
    public int insert(int k, boolean i) {	 // O(log n)
        AVLNode NewNode= new AVLNode(k,i);   // creates node with key k and value i
        int rotate_num = 0;
        if (this.root==this.virtual){ // in case the tree is empty
            this.root=NewNode;
            this.max=NewNode;
            this.min=NewNode;
            NewNode.correct();  // change the fields of the newnode
            size+=1;

            return 0;
        }
        AVLNode node_pointer = this.root; // in case the tree isn't empty
        while (node_pointer != virtual){  // search for the right place to insert the new node

            int current_key = node_pointer.getKey(); // in case the key is already in the tree
            if (current_key == k){
                return  -1;
            }
            else if (current_key > k){ // if current node's key bigger than inserted_node's key 
                if (node_pointer.getLeft() == null){ //if we reach the right place to insert in 
                    node_pointer.setLeft(NewNode);
                    if (k < this.min.getKey()){ // in case the newnode is min after insert O(1)
                        this.min = NewNode;
                    }
                    this.size+=1;
                    NewNode.correct();
                    rotate_num = fixAVLTreeBalance(NewNode); // rotate if needed
                    return rotate_num;	// return number of rotation, which is one or zero 
                }
                node_pointer=node_pointer.getLeft(); // if there is more nodes in the way to the leaves

            }
            else {

                if (node_pointer.getRight() == null){ //if we reach the right place to insert in 
                    node_pointer.setRight(NewNode);
                    if (k > this.max.getKey()){// in case the newnode is max after insert O(1)
                        this.max = NewNode;
                    }
                    this.size+=1;
                    NewNode.correct();
                    rotate_num = fixAVLTreeBalance(NewNode); // rotate if needed
                    return rotate_num;	// return number of rotation, which is one or zero 
                }
                node_pointer=node_pointer.getRight(); // if there is more nodes in the way to the leaves
            }
        }
        return rotate_num;    // we will never reach this line
    }



    private int fixAVLTreeBalance(AVLNode node) { //rotate after insert ,  O(log n)
        int rotate_num=0; 
        AVLNode inserted_node = node;
        AVLNode node_pointer = node;
        while(node_pointer != this.getRoot()){

            node_pointer = node_pointer.getParent(); //starting from the inserted node to the root
            node_pointer.correct();					 // and change the fields of each node
            int Balance = BF(node_pointer);			 // and check whether or not there BF is legal 
            
            if ( Math.abs(Balance)>=2){	// in case BF not legal (BF = 2 or BF = -2)

                if (Balance == 2){ // BF =2 

                    if (BF(node_pointer.getLeft()) == 1){ // if left son with BF 1 then rotate right
                        rotationR(node_pointer);

                        node_pointer.correct();

                        while (inserted_node != root) { //one rotate is enough but we must change other nodes fields for future operations
                            inserted_node = inserted_node.getParent();
                            inserted_node.correct();
                        }
                        rotate_num = rotate_num+1;

                    }

                    else if (BF(node_pointer.getLeft()) == -1){ // if left son with BF -1 then rotate left then right
                        rotationLR(node_pointer);

                        node_pointer.correct();
                        node_pointer.getParent().getLeft().correct();


                        while (inserted_node != root) { //one rotate is enough but we must change other nodes fields for future operations
                            inserted_node = inserted_node.getParent();
                            inserted_node.correct();
                        }
                        rotate_num = rotate_num+1;

                    }
                }
                else if (Balance == -2){ // BF = -2 
                    if (BF(node_pointer.getRight()) == 1){ // if right son with BF 1 then rotate right then left
                        rotationRL(node_pointer);

                        node_pointer.correct();
                        node_pointer.getParent().getRight().correct();

                        while (inserted_node != root) { //one rotate is enough but we must change other nodes fields for future operations
                            inserted_node = inserted_node.getParent();
                            inserted_node.correct();

                        }
                        rotate_num = rotate_num+1;

                    }

                    else if (BF(node_pointer.getRight()) == -1){ // if right son with BF -1 then rotate left 
                        rotationL(node_pointer);

                        node_pointer.correct();

                        while (inserted_node != root) { //one rotate is enough but we must change other nodes fields for future operations
                            inserted_node = inserted_node.getParent();
                            inserted_node.correct();
                        }
                        rotate_num = rotate_num+1;

                    }
                }


            }
        }
        return rotate_num;
    }



    private int BF (AVLNode node){ // calculate Balance factor , O(1)
        return (node == null) ? 0 : node.left.getHeight() - node.right.getHeight();
    }

    //rotation Right
    private void rotationR(AVLNode node) { // rotation right us we learned in class, changing pointers  ,O(1)
        AVLNode leftChild = node.left;
        AVLNode leftRightChild = leftChild.right;
        AVLNode parentNode = node.parent;
        leftChild.right = node; 
        node.parent = leftChild;
        node.left = leftRightChild;
        if (leftRightChild != virtual){
            leftRightChild.parent=node;
        }
        if (parentNode==null){ // in case the node with first abs(BF>1) is the root
            this.root=leftChild;  //then left child is the new root
            leftChild.parent=null;
            return;
        }
        else {
            leftChild.parent=parentNode; 
        }
        if (parentNode.right==node){ // whether to place the new root of the sub-tree in left side or right side of the parent node
            parentNode.right=leftChild;
        }
        else {
            parentNode.left=leftChild;
        }
     }

    //rotation Left
    private void rotationL(AVLNode node) {  // rotation left us we learned in class, changing pointers , O(1)
        AVLNode rightChild=node.right;
        AVLNode rightLeftNode=rightChild.left;
        AVLNode parentNode=node.parent;
        rightChild.left=node;
        node.parent=rightChild;
        node.right=rightLeftNode;
        if (rightLeftNode!=virtual){
            rightLeftNode.parent=node;
        }
        if (parentNode==null){ // in case the node with first abs(BF>1) is the root
            this.root=rightChild; //then right child is the new root
            rightChild.parent=null;
            return;
        }
        else{
            rightChild.parent=parentNode;
        }
        if (parentNode.left==node){ // whether to place the new root of the sub-tree in left side or right side of the parent node
            parentNode.left=rightChild;
        }
        else{
            parentNode.right=rightChild;
        }

    }

    //rotation Right Then Left
    private void rotationRL(AVLNode node) { //O(1)
        rotationR(node.right);
        rotationL(node);

    }

    //rotation Left Then Right
    private void rotationLR(AVLNode node) { //O(1)
        rotationL(node.left);
        rotationR(node);
    }



    private AVLNode findNode(AVLNode root,int k){ // search for node but the returned value is AVLNode , O(log n)
        AVLNode pointer = root;
        if (root == virtual){ // in case empty tree
            return null;
        }
        while( pointer != null ){ 
            if (pointer.getKey()==k){
                return pointer;
            }
            if (pointer.getKey()>k){
                pointer=pointer.getLeft();
            }
            else {
                pointer=pointer.getRight();
            }
        }
        return null; //reach this line when there isn't node with key k
    }

    /*
     * help function in Delete function 
     * in case the node needed to delete has less than to sons
     * then we delete the pointer out of the node that needed to delete
     * in case there zero sons then we replace the del_node with virtual
     * otherwise we replace del_node with del_node's son
     */
    private AVLNode TreeWithOneOrZeroSons(AVLNode node){ //O(1)
        AVLNode nodeParent = node.getParent();
        AVLNode temp;
        if (node.getLeft() != null)
            temp = node.getLeft();
        else
            temp = node.getRight();

        // No child case
        if(temp == null) {
            if (nodeParent.getRight()==node){ // check if del_node on right side or left side
                nodeParent.right= virtual;
            }
            else {
                nodeParent.left = virtual;
            }
            node.parent=virtual; // replace with virtual
            this.size+=-1;
            return nodeParent; //return del_node's parent 

        }
        else {// One child case
            if (nodeParent == null){ //node is root
                root = temp;
                temp.parent=null;
            }
            else if (nodeParent.getRight() == node) { // check if del_node on right side or left side
                nodeParent.right= temp;
            }
            else {
                nodeParent.left=temp;
            }
            temp.parent = nodeParent; 
            node.parent=null;
            node.left=virtual;
            node.right=virtual;// Copy the contents of the non-empty child
            this.size+=-1;
            return temp;
        }
    }

    private int balanceTree(AVLNode node) { //private function for rotations after deleting ,O(log n)
        int numRotations =0, i=0;	
        AVLNode nodePointer = node;
        while (nodePointer != null){  // starts from the deleted node to the root
            nodePointer.correct();	  // change height for the nodes after delete
            int balance = BF(nodePointer);   // calculate BF factor 
            if (balance > 1 && BF(node.getLeft()) >= 0){  // cases for rotation right
                rotationR(nodePointer);
                nodePointer.correct();
                nodePointer.parent.correct();
                numRotations += 1;
            }
            else if (balance > 1 && BF(nodePointer.getLeft()) < 0){  // cases for rotation left then right
                rotationLR(nodePointer);
                nodePointer.correct();
                nodePointer.parent.correct();
                nodePointer.parent.left.correct();

                numRotations += 1;
            }
            else if (balance < -1 && BF(nodePointer.getRight()) <= 0){  // cases for rotation left
                rotationL(nodePointer);
                nodePointer.correct();
                nodePointer.parent.correct();
                numRotations += 1;
            }
            else if (balance < -1 && BF(nodePointer.getRight()) > 0){  // cases for rotation right then left
                rotationRL(nodePointer);
                nodePointer.correct();
                nodePointer.parent.correct();
                nodePointer.parent.right.correct();
                numRotations += 1;
            }
            nodePointer = nodePointer.getParent();

        }
        return numRotations; // return number for rotations 
    }

    /**
     * public int delete(int k)
     * <p>
     * deletes an item with key k from the binary tree, if it is there;
     * the tree must remain valid (keep its invariants).
     * returns the number of nodes which required rebalancing operations (i.e. demotions or rotations).
     * returns -1 if an item with key k was not found in the tree.
     */
    public int delete(int k) { // O(log n)
        if (this.empty()){ // in case the tree is empty.
            return -1;
        }
        AVLNode nodeToDelete = findNode(this.root,k); 
        if (nodeToDelete == null) { // case if an item with key k was not found in the tree.
            return -1;
        }
        if (this.size() == 1){ // if a node with key k was found in the tree and the only node in the tree.
            root=virtual;
            return 0;
        }
        if (nodeToDelete==min){ 		// change the minimum if the del_node is min
            min=successor(nodeToDelete);
        }
        if (nodeToDelete==max){			 // change the maximum if the del_node is max
            max=predecessor(nodeToDelete);
        }
        if( (nodeToDelete.getLeft() == null) || (nodeToDelete.getRight() == null) ) { // if node to delete is leaf or with one child.
            AVLNode currentNode= TreeWithOneOrZeroSons(nodeToDelete);
            return balanceTree(currentNode);
        }

        // other cases (del_node.left != virtual and del_node.right != virtual)
        AVLNode successorNode = successor(nodeToDelete);


        /********/
        AVLNode successorParent = virtual;  
        if (successorNode.getParent() == nodeToDelete){		// successor is the right son of the node needed to delete
            successorParent = successorNode;				
        }
        else {
            successorParent = successorNode.getParent();	// successor isn't the right son of the node needed to delete
        }

        AVLNode successorLeft = successorNode.getLeft();	
        AVLNode successorRight = successorNode.getRight();
        /********/




        AVLNode nodeToDeleteParent = nodeToDelete.getParent();

        if (nodeToDelete == root){ // change the root if needed
            this.root = successorNode;
        }
        else { 
            if (nodeToDeleteParent.getLeft()==nodeToDelete){
                nodeToDeleteParent.left=successorNode;
            }
            else {
                nodeToDeleteParent.right=successorNode;
            }

        }

        // changing pointers
        if (nodeToDelete.getLeft()==successorNode){
            successorNode.left=nodeToDelete;
        }
        else {
            successorNode.left=nodeToDelete.getLeft();
        }

        if (nodeToDelete.getRight()==successorNode){
            successorNode.right=nodeToDelete;
        }
        else {
            successorNode.right=nodeToDelete.getRight();
        }

        successorNode.parent=nodeToDeleteParent;;

        AVLNode NewLeftNode =successorNode.getLeft();
        AVLNode NewRightNode =successorNode.getRight();
        NewLeftNode.parent=successorNode;
        NewRightNode.parent=successorNode;

        nodeToDelete.left=successorLeft;
        nodeToDelete.right=successorRight;
        nodeToDelete.parent=successorParent ;
        AVLNode currentNode= TreeWithOneOrZeroSons(nodeToDelete);
        return balanceTree(currentNode);


    }

    private AVLNode findMaximum(AVLNode node) {  // finding max in the sub-Tree of node , O(log n)
        while (node.getRight() != null) {
            node = node.right;
        }

        return node;
    }

    /**
     * public Boolean min()
     * <p>
     * Returns the info of the item with the smallest key in the tree,
     * or null if the tree is empty
     */
    public Boolean min() { //O(1)
        if (this.empty()){
            return null;
        }
        return this.min.getValue(); // to be replaced by student code
    }

    /**
     * public Boolean max()
     * <p>
     * Returns the info of the item with the largest key in the tree,
     * or null if the tree is empty
     */
    public Boolean max() { //O(1)
        if (this.empty()){
            return null;
        }
        return this.max.getValue(); // to be replaced by student code
    }

    /**
     * public int[] keysToArray()
     * <p>
     * Returns a sorted array which contains all keys in the tree,
     * or an empty array if the tree is empty.
     */
    public int[] keysToArray() {  //O(n) , wrapper function for recursion function 

        int[] arr = new int[this.size];
        inOrder(root, arr, 0);
        return arr;
    }

    private int inOrder(AVLNode node, int[]  arr, int currentIndex) { // recursion function , O(n)

        if (node==null ||node==virtual){
            return currentIndex;
        }
        currentIndex=inOrder(node.getLeft(),arr,currentIndex);
        arr[currentIndex]=node.getKey();
        currentIndex+=1;
        currentIndex=inOrder(node.getRight(),arr,currentIndex);
        return currentIndex;
    }

    /**
     * public boolean[] infoToArray()
     * <p>
     * Returns an array which contains all info in the tree,
     * sorted by their respective keys,
     * or an empty array if the tree is empty.
     */
    public boolean[] infoToArray() { //O(n) , wrapper function for recursion function 

        boolean[] arr = new boolean[this.size];
        inOrderInfo(root, arr, 0 );
        return arr;
    }

    private int inOrderInfo(AVLNode node, boolean[]  arr , int currentIndex) { // recursion function , O(n)

        if (node==null || node==virtual){
            return currentIndex;
        }
        currentIndex=inOrderInfo(node.getLeft(),arr,currentIndex);
        arr[currentIndex]=node.getValue();
        currentIndex+=1;
        currentIndex=inOrderInfo(node.getRight(),arr,currentIndex);
        return currentIndex;
    }

    /**
     * public int size()
     * <p>
     * Returns the number of nodes in the tree.
     */
    public int size() { // O(1)
        return this.size;
    }

    /**
     * public int getRoot()
     * <p>
     * Returns the root AVL node, or null if the tree is empty
     */
    public AVLNode getRoot() { // O(1)
        return this.root;
    }

    /**
     * public boolean prefixXor(int k)
     *
     * Given an argument k which is a key in the tree, calculate the xor of the values of nodes whose keys are
     * smaller or equal to k.
     *
     * precondition: this.search(k) != null
     *
     */
    public boolean prefixXor(int k){ // O(log n)
        int trueCounter=0;	
        AVLNode currentNode = this.findNode(this.root,k); 
        if (currentNode==null){
            return false; // will never reach this line, because of the precondition.
        }
        AVLNode leftToCurrent=currentNode.left; //left son of the node with key k
        trueCounter=leftToCurrent.NumberOfTrue; // NubmerOfTures is the number of nodes with value trues in the sub-Tree 
        if (currentNode.getValue()){		
            trueCounter+=1;
        }
        AVLNode pointer = currentNode.parent;
        while (pointer!=null){		// all the nodes that their key is smaller than k.
            if (pointer.right==currentNode){
                trueCounter+=pointer.left.NumberOfTrue;
                if (pointer.getValue()){
                    trueCounter+=1;
                }
            }
            currentNode=pointer;
            pointer=pointer.getParent();
        }
        if (trueCounter%2==0){
            return false;
        }
        return true;
    }

    /**
     * public AVLNode successor
     *
     * given a node 'node' in the tree, return the successor of 'node' in the tree (or null if successor doesn't exist)
     *
     * @param node - the node whose successor should be returned
     * @return the successor of 'node' if exists, null otherwise
     */
    public AVLNode successor(AVLNode node){
        if (node==null || node==virtual){
            return null; 
        }
        if (node.getRight()!=null){ // in case there is left son then find the min in sub-tree of left son
        	AVLNode succ = node.getRight();
        	while (succ.getLeft()!= null) {
        		succ = succ.getLeft();
        	}
           return succ;
       }
       AVLNode curr_node = node;
       AVLNode parent =node.getParent(); // in case there is node left son  
       while (parent !=null && curr_node == parent.right){
           curr_node = parent;
           parent = parent.parent;
       }
       return parent;
    }

    
    /**
     * private AVLNode predecessor
     *
     * given a node 'node' in the tree, return the predecessor of 'node' in the tree (or null if predecessor doesn't exist)
     *
     * @param node - the node whose predecessor should be returned
     * @return the predecessor of 'node' if exists, null otherwise
     */
    private AVLNode predecessor(AVLNode node) {
        if (node==null || node==virtual){
            return null;
        }
        if (node.getLeft() != null){ // in case there is right son then find the max in sub-tree of right son
            return findMaximum(node.left);
        }
        AVLNode curr_node =node; 
        AVLNode parent =node.getParent();
        while (parent !=null && curr_node ==parent.left){ // in case there is node right son  
            curr_node =parent;
            parent =parent.parent;
        }
        return parent ;
    }

    /**
     * public boolean succPrefixXor(int k)
     *
     * This function is identical to prefixXor(int k) in terms of input/output. However, the implementation of
     * succPrefixXor should be the following: starting from the minimum-key node, iteratively call successor until
     * you reach the node of key k. Return the xor of all visited nodes.
     *
     * precondition: this.search(k) != null
     */
    public boolean succPrefixXor(int k){ //O(k log n)
        int trues = 0;
        AVLNode node = this.min; // start with min node
        while (node!=null && node.getKey() <= k) {
            if (node.getValue() == true) { // if current node's value is true
                trues += 1;
            }
            node=successor(node); 
        }
        return (trues % 2 == 1)? true : false;
    }

    /**
     * public class AVLNode
     * <p>
     * This class represents a node in the AVL tree.
     * <p>
     * IMPORTANT: do not change the signatures of any function (i.e. access modifiers, return type, function name and
     * arguments. Changing these would break the automatic tester, and would result in worse grade.
     * <p>
     * However, you are allowed (and required) to implement the given functions, and can add functions of your own
     * according to your needs.
     */
    public class AVLNode {

        private AVLNode left = virtual;
        private AVLNode parent = null;
        private AVLNode right = virtual;
        private int key;
        private Boolean value;
        private int height = 0;
        private int NumberOfTrue = 0;

        public AVLNode(int key, Boolean value) {
            this.key = key;
            this.value = value;
            if(this.value != null) { // cant use equals on virtual , beacuse this.value is null.
                if (this.value.equals(true)) {
                    this.NumberOfTrue = 1;
                }
            }
        }

        private void setVirtualLeftRight() { // cahnge left and right sons to null in virtual node
            virtual.left = null;
            virtual.right = null;
        }


        //returns node's key (for virtual node return -1)
        public int getKey() { // O(1)
            if (this == virtual) {
                return -1;
            }
            return this.key;
        }

        //returns node's value [info] (for virtual node return null)
        public Boolean getValue() { // O(1)
            if (this == virtual) {
                return null;
            }
            return this.value;
        }

        //sets left child
        public void setLeft(AVLNode node) { // O(1)
            if (node==virtual || node==null){
                this.left = virtual;
                return;
            }
            //illegal set
            if (node.key >= this.key) {
                //System.out.println("can't sets left child");
                return;
            }
            //legal set

            if (node.left == this) { // in case node.left is this, this can't be a parent and a left side at the same time
                node.left = virtual;
            }

            if(node.right == this) { // in case node.right is this, this can't be a parent and a right side at the same time
                node.right = virtual;
            }

            if (node.parent == null) {

                node.parent = this;
                // node.parent == null and this.left == null
                if (this.left == virtual) {
                    this.left = node;
                }
                // node.parent == null and this.left != null
                else {
                    this.left.parent = null;
                    this.left = node;
                }
            }
            // node.parent != null
            else {
                // check whether 'node' is the root of the left subtree of his parent on not.
                if (node.parent.left==node) {
                    node.parent.left = virtual;
                }
                // check whether 'node' is the root of the right subtree of his parent on not.

                if (node.parent.right==node) {
                    node.parent.right = virtual;
                }

                node.parent = this;

                // this.left == null
                if (this.left == virtual) {
                    this.left = node;
                }
                //this.left != null
                else {
                    this.left.parent = null;
                    this.left = node;
                }
            }
            this.SetNumberOfTrue(this.GetNumberOfTrue());
            return;
        }

        //returns left child (if there is no left child return null)
        public AVLNode getLeft() { // O(1)
            if (this.left == virtual) {
                return null;
            }
            return this.left;
        }



        //sets right child
        public void setRight(AVLNode node) { // O(1)
            if (node==virtual || node==null){
                this.right = virtual;
                return;
            }
            //illegal set
            if (node.key <= this.key) {
                //System.out.println("can't sets right child");
                return;
            }
            //legal set

            if (node.left == this) { // in case node.left is this, this can't be a parent and a left side at the same time
                node.left = virtual;
            }

            if(node.right == this) { // in case node.right is this, this can't be a parent and a right side at the same time
                node.right = virtual;
            }

            if (node.parent == null) {

                node.parent = this;
                // node.parent == null and this.right == null
                if (this.right == virtual) {
                    this.right = node;
                }
                // node.parent == null and this.right != null
                else {
                    this.right.parent = null;
                    this.right = node;
                }
            }
            // node.parent != null
            else {
                // check whether 'node' is the root of the left subtree of his parent on not.
                if (node.parent.left==node) {
                    node.parent.left = virtual;
                }
                // check whether 'node' is the root of the right subtree of his parent on not.

                if (node.parent.right==node) {
                    node.parent.right = virtual;
                }

                node.parent = this;

                // this.right == null
                if (this.right == virtual) {
                    this.right = node;
                }
                //this.right != null
                else {
                    this.right.parent = null;
                    this.right = node;
                }
            }

            this.SetNumberOfTrue(this.GetNumberOfTrue());
            return;
        }

        //returns right child (if there is no right child return null)
        public AVLNode getRight() { // O(1)
            if (this.right == virtual) {
                return null;
            }
            return this.right;
        }

        //sets parent
        public void setParent(AVLNode node) { // O(1)
            if (node==virtual){
                this.parent = virtual;
                return;
            }
            if (node==null){
                this.parent = null;
            }
            if (this.key== node.key) {
                return;
            }
            // sets this as Right child of node , equals to sets node as a parent for this while this.key > node.key
            if (this.key > node.key) {
                node.setRight(this);
            }

            // sets this as left child of node , equals to sets node as a parent for this while this.key < node.key
            if (this.key < node.key) {
                node.setLeft(this);
            }
            return;
        }

        //returns the parent (if there is no parent return null)
        public AVLNode getParent() { // O(1)
            return this.parent;
        }

        // Returns True if this is a non-virtual AVL node
        public boolean isRealNode() { // O(1)
            if (this == virtual){
                return false;
            }
            return true;
        }

        // sets the height of the node
        public void setHeight(int height) {
            this.height=height;
        }

        // Returns the height of the node (-1 for virtual nodes)
        public int getHeight() {
            if (this == virtual){
                return -1;
            }
            return Math.max(this.left.height, this.right.height) +1 ;

        }

        private void SetNumberOfTrue (int numberOfTrue) { // sets the number of nodes with true value in the sub-Tree, O(1)
            this.NumberOfTrue= numberOfTrue;
        }

        private int GetNumberOfTrue() { // gets the number of nodes with true value in the sub-Tree
            if (this.value.equals(true)) {
                return this.left.NumberOfTrue + this.right.NumberOfTrue +1;
            }
            else {
                return this.left.NumberOfTrue + this.right.NumberOfTrue;
            }

        }

        private void correct() { //modification for the height and the number of nodes with true value in the sub-Tree , O(1)
            this.setHeight(this.getHeight());
            this.SetNumberOfTrue(this.GetNumberOfTrue());
        }
    
    }

}



